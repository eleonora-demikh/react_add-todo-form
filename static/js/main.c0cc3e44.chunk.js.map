{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","services/initialTodos.ts","api/todos.ts","App.tsx","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","getUserById","userId","usersFromServer","find","initialTodos","App","useState","setUserId","hasUserIdError","setHasUserIdError","setTitle","hasTitleError","setHasTitleError","todoList","setTodoList","action","method","onSubmit","event","preventDefault","listOfTodos","newTodo","Math","max","currentTodos","htmlFor","type","placeholder","value","onChange","formatedValue","target","replace","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0cc3e44.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\nimport './UserInfo.scss';\n\ntype Props = {\n  user?: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\n\nimport './TodoInfo.scss';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      <UserInfo\n        user={todo.user}\n      />\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","import usersFromServer from '../api/users';\nimport todosFromServer from '../api/todos';\nimport { User } from '../types/User';\nimport { Todo } from '../types/Todo';\n\nexport const getUserById = (userId: number): User | undefined => {\n  return usersFromServer.find(user => user.id === userId);\n};\n\nexport const initialTodos: Todo[] = todosFromServer.map(todo => {\n  return {\n    ...todo,\n    user: getUserById(todo.userId),\n  };\n});\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { getUserById, initialTodos } from './services/initialTodos';\n\nexport const App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [todoList, setTodoList] = useState<Todo[]>(initialTodos);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const formatedValue = event.target.value\n      .replace(/[^A-Za-z0-9А-ЩЬЮЯҐЄІЇа-щьюяґєії\\s]/g, '');\n\n    setTitle(formatedValue);\n    setHasTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  const resetForm = () => {\n    setUserId(0);\n    setTitle('');\n    setHasTitleError(false);\n    setHasUserIdError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasUserIdError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    function newTodoId(listOfTodos: Todo[]) {\n      const maxId = Math.max(\n        ...listOfTodos.map(todo => todo.id),\n      );\n\n      return maxId + 1;\n    }\n\n    const newTodo: Todo = {\n      id: newTodoId(todoList),\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    };\n\n    setTodoList(currentTodos => [...currentTodos, newTodo]);\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"selectUser\">User: </label>\n          <select\n            id=\"selectUser\"\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        todos={todoList}\n      />\n\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}